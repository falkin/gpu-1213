#include <iostream>
#include "omp.h"
#include "aleaOMP.h"
/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/
using std::cout;
using std::endl;
/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

void pimc(void)
    {

    int nbThread = omp_get_num_procs();
    omp_set_num_threads(nbThread);

    int n = 1000000000;
    double x, y;
    int i, count = 0;
    double z;
    double pi;

#pragma omp parallel for reduction(+:count) private(x,y,z)
    for (i = 0; i < n; i++)
	{
	x = uniform01_OMP();
	y = uniform01_OMP();
	if (x*x + y*y <= 1)
	    count++;
	}

    pi = (double) count / n * 4;
    cout.precision(15);
    cout << pi << endl;

    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/

